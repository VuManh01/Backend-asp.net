// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project3api_be.Data;

#nullable disable

namespace project3api_be.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("RecipeFlavor", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<int>("FlavorId")
                        .HasColumnType("int")
                        .HasColumnName("flavor_id");

                    b.HasKey("RecipeId", "FlavorId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FlavorId" }, "fk_recipe_flavor_flavors");

                    b.ToTable("recipe_flavor", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int?>("OrderMembershipId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "fk_accounts_roles");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("book_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 2)
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("BookId")
                        .HasName("PRIMARY");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime")
                        .HasColumnName("expires");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("DiscountId")
                        .HasName("PRIMARY");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("FeedbackId")
                        .HasName("PRIMARY");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Flavor", b =>
                {
                    b.Property<int>("FlavorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flavor_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FlavorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("flavor_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("FlavorId")
                        .HasName("PRIMARY");

                    b.ToTable("flavors", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.ImageRecipe", b =>
                {
                    b.Property<int>("ImageRecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_recipe_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text")
                        .HasColumnName("image_link");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("ImageRecipeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RecipeId" }, "fk_image_recipes_recipes");

                    b.ToTable("image_recipes", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.MembershipService", b =>
                {
                    b.Property<int>("MembershipServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("membership_service_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationInDay")
                        .HasColumnType("int")
                        .HasColumnName("duration_in_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("MembershipServiceId")
                        .HasName("PRIMARY");

                    b.ToTable("membership_services", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('pending','shipped','delivered','cancelled')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DiscountId" }, "fk_orders_discounts");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("OrderDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookId" }, "fk_order_details_books");

                    b.HasIndex(new[] { "OrderId" }, "fk_order_details_orders");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("enum('online','on_delivery')")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('pending','completed')")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("PaymentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "fk_payments_orders");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.PaymentMember", b =>
                {
                    b.Property<int>("PaymentMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_member_id");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentType")
                        .HasColumnType("enum('Monthly','Yearly')")
                        .HasColumnName("payment_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("PaymentMemberId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "fk_payment_members_accounts");

                    b.ToTable("payment_members", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recipe_id");

                    b.Property<decimal>("ActiveTime")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("active_time");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("enum('Easy','Medium','Hard')")
                        .HasColumnName("difficulty");

                    b.Property<decimal>("InactiveTime")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("inactive_time");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ingredients");

                    b.Property<bool?>("IsPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_post")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("PreparationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preparation_method");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("recipe_name");

                    b.Property<int>("Servings")
                        .HasColumnType("int")
                        .HasColumnName("servings");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('pending','approved','rejected')")
                        .HasColumnName("status");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("submitted_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("RecipeId")
                        .HasName("PRIMARY");

                    b.ToTable("recipes", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Role", b =>
                {
                    b.Property<int?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Subscription", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sub_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<int>("MembershipServiceId")
                        .HasColumnType("int")
                        .HasColumnName("membership_service_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('active','expired','default active')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("SubId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "fk_subscriptions_accounts");

                    b.HasIndex(new[] { "MembershipServiceId" }, "fk_subscriptions_membership_services");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("project3api_be.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("enum('OTP')")
                        .HasColumnName("token_type");

                    b.HasKey("TokenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "fk_tokens_accounts");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("RecipeFlavor", b =>
                {
                    b.HasOne("project3api_be.Models.Flavor", null)
                        .WithMany()
                        .HasForeignKey("FlavorId")
                        .IsRequired()
                        .HasConstraintName("fk_recipe_flavor_flavors");

                    b.HasOne("project3api_be.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("fk_recipe_flavor_recipes");
                });

            modelBuilder.Entity("project3api_be.Models.Account", b =>
                {
                    b.HasOne("project3api_be.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("project3api_be.Models.ImageRecipe", b =>
                {
                    b.HasOne("project3api_be.Models.Recipe", "Recipe")
                        .WithMany("ImageRecipes")
                        .HasForeignKey("RecipeId")
                        .IsRequired()
                        .HasConstraintName("fk_image_recipes_recipes");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("project3api_be.Models.Order", b =>
                {
                    b.HasOne("project3api_be.Models.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("fk_orders_discounts");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("project3api_be.Models.OrderDetail", b =>
                {
                    b.HasOne("project3api_be.Models.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("fk_order_details_books");

                    b.HasOne("project3api_be.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("project3api_be.Models.Payment", b =>
                {
                    b.HasOne("project3api_be.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("project3api_be.Models.PaymentMember", b =>
                {
                    b.HasOne("project3api_be.Models.Account", "Account")
                        .WithMany("PaymentMembers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_payment_members_accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("project3api_be.Models.Subscription", b =>
                {
                    b.HasOne("project3api_be.Models.Account", "Account")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_accounts");

                    b.HasOne("project3api_be.Models.MembershipService", "MembershipService")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MembershipServiceId")
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_membership_services");

                    b.Navigation("Account");

                    b.Navigation("MembershipService");
                });

            modelBuilder.Entity("project3api_be.Models.Token", b =>
                {
                    b.HasOne("project3api_be.Models.Account", "Account")
                        .WithMany("Tokens")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("fk_tokens_accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("project3api_be.Models.Account", b =>
                {
                    b.Navigation("PaymentMembers");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("project3api_be.Models.Book", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("project3api_be.Models.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("project3api_be.Models.MembershipService", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("project3api_be.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("project3api_be.Models.Recipe", b =>
                {
                    b.Navigation("ImageRecipes");
                });

            modelBuilder.Entity("project3api_be.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
